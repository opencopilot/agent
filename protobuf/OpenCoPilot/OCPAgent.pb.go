// Code generated by protoc-gen-go. DO NOT EDIT.
// source: OCPAgent.proto

/*
Package opencopilot is a generated protocol buffer package.

It is generated from these files:
	OCPAgent.proto

It has these top-level messages:
	StatusRequest
	StartServiceRequest
	ConfigureServiceRequest
	StopServiceRequest
	SetServiceGRPCRequest
	GetServiceLogsRequest
	ServiceLogLine
	Status
*/
package opencopilot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StartServiceRequest struct {
	ImageRef string `protobuf:"bytes,1,opt,name=image_ref,json=imageRef" json:"image_ref,omitempty"`
}

func (m *StartServiceRequest) Reset()                    { *m = StartServiceRequest{} }
func (m *StartServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StartServiceRequest) ProtoMessage()               {}
func (*StartServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StartServiceRequest) GetImageRef() string {
	if m != nil {
		return m.ImageRef
	}
	return ""
}

type ConfigureServiceRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *ConfigureServiceRequest) Reset()                    { *m = ConfigureServiceRequest{} }
func (m *ConfigureServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigureServiceRequest) ProtoMessage()               {}
func (*ConfigureServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConfigureServiceRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type StopServiceRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *StopServiceRequest) Reset()                    { *m = StopServiceRequest{} }
func (m *StopServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StopServiceRequest) ProtoMessage()               {}
func (*StopServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StopServiceRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type SetServiceGRPCRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	Port        int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *SetServiceGRPCRequest) Reset()                    { *m = SetServiceGRPCRequest{} }
func (m *SetServiceGRPCRequest) String() string            { return proto.CompactTextString(m) }
func (*SetServiceGRPCRequest) ProtoMessage()               {}
func (*SetServiceGRPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SetServiceGRPCRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *SetServiceGRPCRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type GetServiceLogsRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *GetServiceLogsRequest) Reset()                    { *m = GetServiceLogsRequest{} }
func (m *GetServiceLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceLogsRequest) ProtoMessage()               {}
func (*GetServiceLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetServiceLogsRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type ServiceLogLine struct {
	Line string `protobuf:"bytes,1,opt,name=line" json:"line,omitempty"`
}

func (m *ServiceLogLine) Reset()                    { *m = ServiceLogLine{} }
func (m *ServiceLogLine) String() string            { return proto.CompactTextString(m) }
func (*ServiceLogLine) ProtoMessage()               {}
func (*ServiceLogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ServiceLogLine) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

type Status struct {
	AgentId  string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Services []*Status_AgentService `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Status) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *Status) GetServices() []*Status_AgentService {
	if m != nil {
		return m.Services
	}
	return nil
}

type Status_AgentService struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Image string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
}

func (m *Status_AgentService) Reset()                    { *m = Status_AgentService{} }
func (m *Status_AgentService) String() string            { return proto.CompactTextString(m) }
func (*Status_AgentService) ProtoMessage()               {}
func (*Status_AgentService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *Status_AgentService) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Status_AgentService) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func init() {
	proto.RegisterType((*StatusRequest)(nil), "opencopilot.StatusRequest")
	proto.RegisterType((*StartServiceRequest)(nil), "opencopilot.StartServiceRequest")
	proto.RegisterType((*ConfigureServiceRequest)(nil), "opencopilot.ConfigureServiceRequest")
	proto.RegisterType((*StopServiceRequest)(nil), "opencopilot.StopServiceRequest")
	proto.RegisterType((*SetServiceGRPCRequest)(nil), "opencopilot.SetServiceGRPCRequest")
	proto.RegisterType((*GetServiceLogsRequest)(nil), "opencopilot.GetServiceLogsRequest")
	proto.RegisterType((*ServiceLogLine)(nil), "opencopilot.ServiceLogLine")
	proto.RegisterType((*Status)(nil), "opencopilot.Status")
	proto.RegisterType((*Status_AgentService)(nil), "opencopilot.Status.AgentService")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OCPAgent service

type OCPAgentClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error)
	StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*Status, error)
	ConfigureService(ctx context.Context, in *ConfigureServiceRequest, opts ...grpc.CallOption) (*Status, error)
	StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*Status, error)
	GetServiceLogs(ctx context.Context, in *GetServiceLogsRequest, opts ...grpc.CallOption) (OCPAgent_GetServiceLogsClient, error)
	SetServiceGRPC(ctx context.Context, in *SetServiceGRPCRequest, opts ...grpc.CallOption) (*Status, error)
}

type oCPAgentClient struct {
	cc *grpc.ClientConn
}

func NewOCPAgentClient(cc *grpc.ClientConn) OCPAgentClient {
	return &oCPAgentClient{cc}
}

func (c *oCPAgentClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/opencopilot.OCPAgent/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCPAgentClient) StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/opencopilot.OCPAgent/StartService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCPAgentClient) ConfigureService(ctx context.Context, in *ConfigureServiceRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/opencopilot.OCPAgent/ConfigureService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCPAgentClient) StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/opencopilot.OCPAgent/StopService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCPAgentClient) GetServiceLogs(ctx context.Context, in *GetServiceLogsRequest, opts ...grpc.CallOption) (OCPAgent_GetServiceLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OCPAgent_serviceDesc.Streams[0], c.cc, "/opencopilot.OCPAgent/GetServiceLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &oCPAgentGetServiceLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OCPAgent_GetServiceLogsClient interface {
	Recv() (*ServiceLogLine, error)
	grpc.ClientStream
}

type oCPAgentGetServiceLogsClient struct {
	grpc.ClientStream
}

func (x *oCPAgentGetServiceLogsClient) Recv() (*ServiceLogLine, error) {
	m := new(ServiceLogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oCPAgentClient) SetServiceGRPC(ctx context.Context, in *SetServiceGRPCRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/opencopilot.OCPAgent/SetServiceGRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OCPAgent service

type OCPAgentServer interface {
	GetStatus(context.Context, *StatusRequest) (*Status, error)
	StartService(context.Context, *StartServiceRequest) (*Status, error)
	ConfigureService(context.Context, *ConfigureServiceRequest) (*Status, error)
	StopService(context.Context, *StopServiceRequest) (*Status, error)
	GetServiceLogs(*GetServiceLogsRequest, OCPAgent_GetServiceLogsServer) error
	SetServiceGRPC(context.Context, *SetServiceGRPCRequest) (*Status, error)
}

func RegisterOCPAgentServer(s *grpc.Server, srv OCPAgentServer) {
	s.RegisterService(&_OCPAgent_serviceDesc, srv)
}

func _OCPAgent_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCPAgentServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opencopilot.OCPAgent/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCPAgentServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCPAgent_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCPAgentServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opencopilot.OCPAgent/StartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCPAgentServer).StartService(ctx, req.(*StartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCPAgent_ConfigureService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCPAgentServer).ConfigureService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opencopilot.OCPAgent/ConfigureService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCPAgentServer).ConfigureService(ctx, req.(*ConfigureServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCPAgent_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCPAgentServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opencopilot.OCPAgent/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCPAgentServer).StopService(ctx, req.(*StopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCPAgent_GetServiceLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetServiceLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OCPAgentServer).GetServiceLogs(m, &oCPAgentGetServiceLogsServer{stream})
}

type OCPAgent_GetServiceLogsServer interface {
	Send(*ServiceLogLine) error
	grpc.ServerStream
}

type oCPAgentGetServiceLogsServer struct {
	grpc.ServerStream
}

func (x *oCPAgentGetServiceLogsServer) Send(m *ServiceLogLine) error {
	return x.ServerStream.SendMsg(m)
}

func _OCPAgent_SetServiceGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceGRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCPAgentServer).SetServiceGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opencopilot.OCPAgent/SetServiceGRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCPAgentServer).SetServiceGRPC(ctx, req.(*SetServiceGRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OCPAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opencopilot.OCPAgent",
	HandlerType: (*OCPAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _OCPAgent_GetStatus_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _OCPAgent_StartService_Handler,
		},
		{
			MethodName: "ConfigureService",
			Handler:    _OCPAgent_ConfigureService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _OCPAgent_StopService_Handler,
		},
		{
			MethodName: "SetServiceGRPC",
			Handler:    _OCPAgent_SetServiceGRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServiceLogs",
			Handler:       _OCPAgent_GetServiceLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "OCPAgent.proto",
}

func init() { proto.RegisterFile("OCPAgent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0xee, 0x93, 0x40,
	0x10, 0xc6, 0xff, 0x50, 0x5b, 0x61, 0xa8, 0x68, 0xa6, 0x36, 0x56, 0x7a, 0x10, 0x37, 0x3d, 0xf4,
	0x44, 0x4c, 0x35, 0x31, 0x31, 0x8d, 0x89, 0x69, 0x4c, 0xd3, 0xd8, 0xd8, 0x06, 0xe2, 0xb9, 0xc1,
	0xb2, 0x25, 0x9b, 0x54, 0x16, 0x61, 0xeb, 0xab, 0xf8, 0x58, 0xbe, 0x92, 0x61, 0xa1, 0x14, 0x10,
	0x12, 0x7b, 0xdb, 0x9d, 0x9d, 0xef, 0x9b, 0x61, 0xe6, 0x07, 0x98, 0xbb, 0xd5, 0xfe, 0x53, 0x48,
	0x23, 0xe1, 0xc4, 0x09, 0x17, 0x1c, 0x0d, 0x1e, 0xd3, 0xe8, 0xc8, 0x63, 0x76, 0xe6, 0x82, 0x3c,
	0x85, 0x27, 0x9e, 0xf0, 0xc5, 0x25, 0x75, 0xe9, 0xcf, 0x0b, 0x4d, 0x05, 0x59, 0xc0, 0xc8, 0x13,
	0x7e, 0x22, 0x3c, 0x9a, 0xfc, 0x62, 0x47, 0x5a, 0x84, 0x71, 0x0a, 0x3a, 0xfb, 0xe1, 0x87, 0xf4,
	0x90, 0xd0, 0xd3, 0x44, 0xb1, 0x95, 0xb9, 0xee, 0x6a, 0x32, 0xe0, 0xd2, 0x13, 0x59, 0xc2, 0x8b,
	0x15, 0x8f, 0x4e, 0x2c, 0xbc, 0x24, 0xb4, 0xa1, 0x7b, 0x0d, 0xc3, 0x23, 0x8f, 0x84, 0xcf, 0x22,
	0x9a, 0x1c, 0x58, 0x50, 0x48, 0x8d, 0x32, 0xb6, 0x09, 0xc8, 0x7b, 0x40, 0x4f, 0xf0, 0xf8, 0x7e,
	0xe1, 0x57, 0x18, 0x7b, 0xf4, 0xda, 0xe8, 0xda, 0xdd, 0xaf, 0xfe, 0x5f, 0x8b, 0x08, 0x8f, 0x62,
	0x9e, 0x88, 0x89, 0x6a, 0x2b, 0xf3, 0xbe, 0x2b, 0xcf, 0xe4, 0x03, 0x8c, 0xd7, 0xa5, 0xdf, 0x96,
	0x87, 0xe9, 0x1d, 0xbd, 0xcc, 0xc0, 0xbc, 0x09, 0xb7, 0x2c, 0xa2, 0x59, 0x85, 0x33, 0x8b, 0x68,
	0x91, 0x2c, 0xcf, 0xe4, 0xb7, 0x02, 0x83, 0x7c, 0xdc, 0xf8, 0x12, 0x34, 0x3f, 0x5b, 0xca, 0xcd,
	0xef, 0xb1, 0xbc, 0x6f, 0x02, 0x5c, 0x82, 0x96, 0xe6, 0x5e, 0xe9, 0x44, 0xb5, 0x7b, 0x73, 0x63,
	0x61, 0x3b, 0x95, 0x9d, 0x39, 0xb9, 0x83, 0x23, 0x77, 0x7a, 0x9d, 0x5a, 0xa9, 0xb0, 0xde, 0xc1,
	0xb0, 0xfa, 0x82, 0x26, 0xa8, 0x65, 0x09, 0x95, 0x05, 0xf8, 0x1c, 0xfa, 0x72, 0x71, 0xf2, 0xd3,
	0x75, 0x37, 0xbf, 0x2c, 0xfe, 0xf4, 0x40, 0xbb, 0x72, 0x82, 0x1f, 0x41, 0xcf, 0x06, 0x91, 0x37,
	0x6a, 0xb5, 0xd4, 0x2e, 0x06, 0x63, 0x8d, 0x5a, 0xde, 0xc8, 0x03, 0xae, 0x61, 0x58, 0x65, 0x08,
	0xff, 0x69, 0xbf, 0x89, 0x57, 0x97, 0xd1, 0x0e, 0x9e, 0x35, 0xc1, 0xc2, 0x59, 0x2d, 0xb5, 0x83,
	0xbb, 0x2e, 0xc3, 0xcf, 0x60, 0x54, 0x58, 0xc3, 0x57, 0x8d, 0xac, 0x26, 0x85, 0x5d, 0x36, 0xdf,
	0xc0, 0xac, 0x93, 0x82, 0xa4, 0x96, 0xd8, 0x8a, 0x91, 0x35, 0xad, 0x9b, 0xd5, 0x70, 0x21, 0x0f,
	0x6f, 0x14, 0xfc, 0x92, 0x41, 0x54, 0x05, 0xba, 0x61, 0xdb, 0x4a, 0x7b, 0x47, 0x8f, 0xdf, 0x07,
	0xf2, 0x6f, 0x7f, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xfd, 0x6c, 0x89, 0xff, 0x03, 0x00,
	0x00,
}
